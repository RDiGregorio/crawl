bindkey = [s] CMD_NO_CMD_DEFAULT
bindkey = [p] CMD_NO_CMD_DEFAULT

travel_delay = -1
travel_key_stop = false
show_travel_trail = false
rest_delay = -1
explore_auto_rest = true
rest_wait_both = true
show_more = false
automagic_enable = true

force_more_message += flicker back into view
force_more_message += you miscast
force_more_message += know that spell
force_more_message += resists
force_more_message += struggles to resist
force_more_message += calcifying dust hits you
force_more_message += unable to access your magic
force_more_message += too confused to cast spells
force_more_message += wracked with pain
force_more_message += powers of darkness
force_more_message += horrible wounds
force_more_message += back to life
force_more_message += smites you
force_more_message += autopickup
force_more_message += back at you
force_more_message += transformation is almost over
force_more_message += magic feels tainted
force_more_message += feel yourself slow down
force_more_message += winds around you calm down
force_more_message += translocation energy dissipates
force_more_message += mighty Pandemonium lord
force_more_message += grow feeble
force_more_message += are being watched

runrest_stop_message += transformation is almost over
runrest_stop_message += back to life

explore_stop = stairs, shops, altars, portals, branches, runed_doors
explore_stop += greedy_pickup

autopickup_exceptions += brilliance, holy word, silence
autopickup_exceptions += polymorph, random effects
autopickup_exceptions += <phantom mirror

message_colour += mute:Cannot currently process new keys

species = ho
background = be
weapon = hand axe
default_manual_training = true

############################################################################
# main                                                                     #
############################################################################

#macros += M p ===explore
macros += M o ===start_running

:local running = false

:function start_running()
:  running = true
:end

:function must_stop_running()
:  if not running then
:    return false
:  end
:  if in_last_message("explore") or
:      in_last_message("exploring") or
:      in_last_message("strange disturbance") or
:      in_last_message("too injured to fight") or
:      in_last_message("reachable target") then
:    return true
:  end
:  return is_scared()
:end

:function ready()
:  local threat_level = threat()
:  if threat_level > 0 then
:    local channel = nil
:    local monster = find_scary_monster()
:    local message = "Danger: " .. threat_level
:    if monster or threat_level >= 2 ^ 4 then
:      channel = 6
:    end
:    if monster then
:      message = message .. " (" .. monster.name(monster) .. ")"
:    end
:    print(message, channel)
:  end
:  if you.turns() == 0 then
:    you.train_skill("Axes", 2)
:    you.train_skill("Armour", 1)
:    you.train_skill("Fighting", 1)
:    you.train_skill("Dodging", 0)
:  end
:  if must_stop_running() then
:    running = false
:    print("~~~~~~~~~~~~~~~~~~~~ STOPPED RUNNING ~~~~~~~~~~~~~~~~~~~~")
:  end
:  if running then
:    if is_safe() then
:      explore()
:    else
:      hit_closest()
:    end
:  end
:end

############################################################################
# exploration                                                              #
############################################################################

:function must_rest()
:  return you.status("berserk cooldown") or you.slowed()
:end

:function explore()
:  if is_safe() then
:    if you.berserk() or must_rest() then
:      crawl.sendkeys("5")
:      return
:    end
:    if remove_curse() then
:      return
:    end
:    if ready_to_identify_items() and identify_items() then
:      return
:    end
:    if upgrade_equipment() then
:      return
:    end
:    if drop_junk() then
:      return
:    end
:  else
:    running = false
:  end
:  crawl.sendkeys("o")
:end

############################################################################
# combat                                                                   #
############################################################################

:function is_scared()
:  if you.poison_survival() < 1 or you.caught() or you.confused() then
:    return true
:  end
:  if not is_safe() then
:    if find_scary_monster() then
:      return true
:    end
:    return threat() >= 2 ^ 3 or
:        hp_percent() < 75 or
:        must_rest() or
:        you.poisoned()
:  end
:  return false
:end

:function is_scary_monster(target)
:  if target.is_unique(target) then
:    return true
:  end
:  if has_spell(target, "Symbol of Torment") or has_spell("Flay") then
:    return true
:  end
:  local names = {
:    -- lair
:    "oklob plant",
:    "electric eel",
:    "basilisk",
:    "hydra",
:    "dream sheep",
:    "catoblepas"
:  }
:  for _, name in ipairs(names) do
:    if target.name(target):find(name) then
:      return true
:    end
:  end
:  return false
:end

:function find_scary_monster()
:  for a = -8, 8 do
:    for b = -8, 8 do
:      c = monster.get_monster_at(a, b)
:      if c and not c.is_safe(c) and is_scary_monster(c) then
:        return c
:      end
:    end
:  end
:end

:function has_spell(monster, name)
:  for _, book in ipairs(monster.spells(monster)) do
:    for _, spell in ipairs(book) do
:      if spell:find(name) then
:        return true
:      end
:    end
:  end
:  return false
:end

:function threat()
:  local result = 0
:  for a = -8, 8 do
:    for b = -8, 8 do
:      c = monster.get_monster_at(a, b)
:      if c and not c.is_safe(c) then
:        result = result + calculate_threat(c)
:      end
:    end
:  end
:  return result
:end

:function calculate_threat(target)
:  return 2 ^ target.threat(target)
:end

:function is_safe()
:  for a = -8,8 do
:    for b = -8,8 do
:      c = monster.get_monster_at(a, b)
:      if c and not c.is_safe(c) then
:        return false
:      end
:    end
:  end
:  return true
:end

:function hp_percent()
:  a, b = you.hp()
:  return 100 * a / b
:end

:function mp_percent()
:  a, b = you.mp()
:  return 100 * a / b
:end

############################################################################
# item dropping                                                            #
############################################################################

:function drop(item)
:  local letter = items.index_to_letter(item.slot)
:  crawl.sendkeys("d" .. letter .. string.char(13))
:end

:function can_drop_if_burdened(item)
:  if item.class(true) == "wand" then
:    return not (item.subtype() == "digging")
:  end
:  return false
:end

:function drop_junk()
:  for item in inventory() do
:    if is_junk(item) then
:      if not (item.cursed and item.equipped) then
:        drop(item)
:        return true
:      end
:    end
:  end
:  return false
:end

:function is_junk_weapon(item)
:  if item.class(true) == "weapon" then
:    for other in inventory() do
:      if compare_weapons(item, other) < 0 then
:        return true
:      end
:    end
:  end
:  return false
:end

:function is_junk_armour(item)
:  if item.subtype() == "body" then
:    local equipped = items.equipped_at("Armour")
:    if equipped and is_scales(equipped) then
:      return true
:    end
:  end
:  if item.class(true) == "armour" and not item.branded then
:    for other in inventory() do
:      if compare_armour(item, other) < 0 then
:        return true
:      end
:    end
:  end
:  return false
:end

:function is_junk_amulet(item)
:  if is_amulet(item) then
:    if item.subtype() == "amulet of inaccuracy" then
:      return true
:    end
:    for other in inventory() do
:      if compare_amulets(item, other) < 0 then
:        return true
:      end
:    end
:  end
:  return false
:end

# rings are not supported yet

:function is_junk_ring(item)
:  local good_rings = {
:    "ring of evasion",
:    "ring of poison resistance",
:    "ring of positive energy",
:    "ring of protection",
:    "ring of protection from cold",
:    "ring of protection from fire",
:    "ring of resist corrosion",
:    "ring of see invisible",
:    "ring of slaying",
:    "ring of willpower"
:  }
:  if is_ring(item) and
:      item.subtype() and
:      not item.artefact then
:    if item.plus and item.plus < 0 then
:      return true
:    end
:    for _, subtype in ipairs(good_rings) do
:      if item.subtype() == subtype then
:        return false
:      end
:    end
:    return true
:  end
:  return false
:end

:function is_junk(item)
:  if is_junk_weapon(item) or
:      is_junk_armour(item) or
:      is_junk_amulet(item) or
:      unneeded_duplicate(item) then
:    return true
:  end
:  if burdened() and can_drop_if_burdened(item) then
:    return true
:  end
:  local junk_egos = {
:    "harm"
:  }
:  local junk_subtypes = {
:    "attraction",
:    "degeneration",
:    "lignification",
:    "brilliance",
:    "holy word",
:    "silence",
:    "immolation",
:    "noise",
:    "random uselessness",
:    "torment",
:    "vulnerability"
:  }
:  for _, ego in ipairs(junk_egos) do
:    if item.ego(true) == ego then 
:      return true
:    end
:  end
:  for _, subtype in ipairs(junk_subtypes) do
:    if item.subtype() == subtype then 
:      return true
:    end
:  end
:  return false
:end

############################################################################
# autopickup                                                               #
############################################################################

:function unneeded_duplicate(item)
:  if item.artefact then
:    return false
:  end
:  if item.class(true) == "jewellery" and item.subtype() or
:      item.subtype() == "phantom mirror" then
:    for other in inventory() do
:      if item.subtype() == other.subtype() and
:          not (item.slot == other.slot) then
:        return true
:      end
:    end
:  end
:  return false
:end

:function want_weapon(item)
:  if item.class(true) == "weapon" and 
:      not is_useless(item) then
:    local best = best_damage(item.weap_skill)
:    if item.damage > best then
:      return true
:    end
:    if item.damage == best then
:      return item.branded
:    end
:  end
:  return false
:end

:function want_armour(item)
:  if item.class(true) == "armour" and
:      not is_useless(item) and
:      not is_scales(item) then
:    local best = best_ac(item.subtype())
:    if item.ac > best then
:      return true
:    end
:    if item.subtype() == "helmet" or
:        item.subtype() == "cloak" or
:        item.damage == best then
:      return item.branded
:    end
:  end
:  return false
:end

:function want_book(item)
:  return item.class(true) == "book" and not item.is_useless
:end

:function autopickup(item, name)
:  if unneeded_duplicate(item) or
:      is_useless(item) or
:      is_junk_ring(item) then
:    return false
:  end
:  if burdened() and can_drop_if_burdened(item) then
:    return false
:  end
:  if item.artefact then
:    return true
:  end
:  if want_book(item) then
:    return true
:  end
:  if want_weapon(item) then
:    return true
:  end
:  if want_armour(item) then
:    return true
:  end
:end

:add_autopickup_func(autopickup)

############################################################################
# curse removal                                                            #
############################################################################

:function scroll_of_remove_curse_letter()
:  for item in inventory() do
:    if item.class(true) == "scroll" and
:        item.subtype() == "remove curse" then
:      return items.index_to_letter(item.slot)
:    end
:  end
:end

:function remove_curse()
:  local rc_letter = scroll_of_remove_curse_letter()
:  if rc_letter then
:    for item in inventory() do
:      if item.cursed and item.equipped then
:        return read_scroll(rc_letter)
:      end
:    end
:  end
:  return false
:end

############################################################################
# item identification                                                      #
############################################################################

:function scroll_of_identify_letter()
:  for item in inventory() do
:    if item.class(true) == "scroll" and item.subtype() == "identify" then
:      return items.index_to_letter(item.slot)
:    end
:  end
:end

:function ready_to_identify_items()
:  if scroll_of_identify_letter() then
:    return true
:  end
:  for item in inventory() do
:    if want_to_identify(item) then
:      return true
:    end
:  end
:  return false
:end

:function want_to_identify(item)
:  if not item.fully_identified then
:    if faith_equipped() and is_amulet(item) then
:      return true
:    end
:    if item.class(true) == "potion" then
:      return true
:    end
:  end
:  return false
:end

:function identify_items()
:  local id_letter = scroll_of_identify_letter()
:  for item in inventory() do
:    if item.class(true) == "scroll" and not item.fully_identified then
:      return read_scroll(items.index_to_letter(item.slot))
:    end
:    if want_to_identify(item) and not item.artefact and id_letter then
:      return read_scroll(id_letter .. items.index_to_letter(item.slot))
:    end
:  end
:  return false
:end

############################################################################
# item utility                                                             #
############################################################################

:function inventory()
:  return iter.invent_iterator:new(items.inventory())
:end

:function burdened()
:  return table.getn(items.inventory()) > 47
:end

:function read_scroll(letter)
:  if you.silenced() then
:    return false
:  end
:  crawl.sendkeys("r" .. letter)
:  return true
:end

############################################################################
# equipment utility                                                        #
############################################################################

:function uses_weapon_skill(item)
:  return item.class(true) == "weapon" and item.weap_skill == "Axes"
:end

:function is_amulet(item)
:  if item.class(true) == "jewellery" then
:    return item.name():find("amulet") or item.name():find("necklace")
:  end
:  return false
:end

:function is_ring(item)
:  if item.class(true) == "jewellery" then
:    return item.name():find("ring")
:  end
:  return false
:end

:function is_scales(item)
:  return item.name():find("scales")
:end

:function compare_amulets(left, right)
:  -- todo: handle artefacts
:  if left.artefact or right.artefact then
:    return 0
:  end
:  if not is_amulet(left) or not is_amulet(right) then
:    return 0
:  end
:  if not left.fully_identified or not right.fully_identified then
:    return 0
:  end
:  return compare(amulet_level(left), amulet_level(right))
:end

:function amulet_level(amulet)
:  if amulet.subtype() == "amulet of regeneration" then
:    return 6
:  end
:  if amulet.subtype() == "amulet of guardian spirit" then
:    return 5
:  end
:  if amulet.subtype() == "amulet of faith" then
:    return 4
:  end
:  if amulet.subtype() == "amulet of reflection" then
:    return 3
:  end
:  if amulet.subtype() == "amulet of the acrobat" then
:    return 2
:  end
:  if amulet.subtype() == "amulet of magic regeneration" then
:    return 1
:  end
:  return 0
:end

:function is_ring_missing()
:  local left = items.equipped_at("Left Ring")
:  local right = items.equipped_at("Right Ring")
:  return not left or not right
:end

:function faith_equipped()
:  local amulet = items.equipped_at("Amulet")
:  return amulet and amulet.subtype() == "amulet of faith"
:end

:function equip_ring(item, letter)
:  if is_ring(item) then
:    local left = items.equipped_at("Left Ring")
:    local right = items.equipped_at("Right Ring")
:    if is_ring_missing() then
:      return item.puton()
:    end
:    if left.cursed and right.cursed then
:      return false
:    end
:    if left.cursed or right.cursed then
:      return item.puton()
:    end
:    letter = letter or items.index_to_letter(left.slot)
:    crawl.sendkeys("P" .. items.index_to_letter(item.slot) .. letter)
:    return true
:  end
:  return false
:end

:function equipped_at(subtype)
:  local translations = {
:    cloak = "Cloak",
:    helmet = "Helmet",
:    gloves = "Gloves",
:    boots = "Boots",
:    body = "Armour",
:    shield = "Shield"
:  }
:  return items.equipped_at(translations[subtype])
:end

:function upgrade_equipment()
:  for item in inventory() do
:    if item.class(true) == "weapon" and
:        not item.artefact and 
:        not is_useless(item) then
:      local equipped = items.equipped_at("Weapon")
:      if not equipped or
:          not item.fully_identified or
:          compare_weapons(item, equipped) > 0 then
:        if not item.equipped and
:            not (equipped and equipped.cursed) and
:            item.wield() then
:          return true
:        end
:      end
:    end
:    if item.class(true) == "armour" and
:        not item.artefact and
:        not is_useless(item) then
:      local equipped = equipped_at(item.subtype())
:      if not equipped or
:          not item.fully_identified or
:          compare_armour(item, equipped) > 0 then
:        if not item.equipped and
:            not (equipped and equipped.cursed) and
:            item.wear() then
:          return true
:        end
:      end
:    end
:    if is_amulet(item) and
:        not item.artefact and
:        not is_useless(item) then
:      local equipped = items.equipped_at("Amulet")
:      if not equipped or
:          not item.fully_identified and not faith_equipped() or
:          compare_amulets(item, equipped) > 0 then
:        if not item.equipped and
:            not (equipped and equipped.cursed) and
:            item.puton() then
:          return true
:        end
:      end
:    end
:  end
:  return false
:end

############################################################################
# weapon and armour utility                                                #
############################################################################

:function compare_weapons(left, right)
:  -- todo: handle artefacts
:  -- todo: handle egos
:  if left.artefact or right.artefact then
:    return 0
:  end
:  if left.is_useless or right.is_useless then
:    return 0
:  end
:  if not left.class(true) == "weapon" or
:      not right.class(true) == "weapon" then
:    return 0
:  end
:  if not (left.weap_skill == right.weap_skill) then
:    return 0
:  end
:  if not left.fully_identified or not right.fully_identified then
:    return 0
:  end
:  return compare(left.damage + left.plus, right.damage + right.plus)
:end

:function compare_armour(left, right)
:  -- todo: handle artefacts
:  -- todo: handle egos
:  if left.artefact or right.artefact then
:    return 0
:  end
:  if left.is_useless or right.is_useless then
:    return 0
:  end
:  if not left.class(true) == "armour" or
:      not right.class(true) == "armour" then
:    return 0
:  end
:  if not (left.subtype() == right.subtype()) then
:    return 0
:  end
:  if not left.fully_identified or not right.fully_identified then
:    return 0
:  end
:  if is_scales(left) or is_scales(right) then
:    return 0
:  end
:  return compare(left.ac + left.plus, right.ac + right.plus)
:end

:function best_damage(weap_skill)
:  local result = 0
:  for item in inventory() do
:    if item.weap_skill == weap_skill and item.damage > result then
:      result = item.damage
:    end
:  end
:  return result
:end

:function best_ac(subtype)
:  local result = 0
:  for item in inventory() do
:    if item.subtype() == subtype and item.ac > result then
:      result = item.ac
:    end
:  end
:  return result
:end

:function is_useless(item)
:  if item.class(true) == "armour" then
:    return item.subtype() == "shield" or item.name():find("barding")
:  end
:  if item.class(true) == "weapon" then
:    return not uses_weapon_skill(item)
:  end
:  return false
:end

############################################################################
# general utility                                                          #
############################################################################

:function in_last_message(message)
:  return crawl.messages(1):find(message)
:end

:function print(value, channel)
:  crawl.mpr(tostring(value), channel)
:end

:function compare(left, right)
:  if left < right then
:    return -1
:  end
:  if left > right then
:    return 1
:  end
:  return 0
:end

############################################################################
# hooks                                                                    #
############################################################################

:function c_answer_prompt(prompt)
:  if prompt:find("Keep disrobing") or prompt:find("Keep equipping") then
:    return false
:  end
:  if prompt:find("Really unwield") or
:      prompt:find("Really take off") or
:      prompt:find("Really remove") or
:      prompt:find("Really wield") or
:      prompt:find("Really wear") or
:      prompt:find("Really put on") then
:    return true
:  end
:end

:function choose_stat_gain()
:  return "i"
:end

############################################################################
# debug                                                                    #
############################################################################

macros += M c ===debug

:function debug()
:  for item in inventory() do
:    print(item.subtype())
:  end
:end